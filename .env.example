# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to `.env`.

# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.

# When adding additional environment variables, the schema in "/src/env.js"
# should be updated accordingly.

# Next Auth
# You can generate a new secret on the command line with:
# openssl rand -base64 32
# https://next-auth.js.org/configuration/options#secret
AUTH_SECRET=""
NEXTAUTH_URL="http://localhost:3000"

# Next Auth Google Provider
# Get these from https://console.developers.google.com/
AUTH_GOOGLE_ID=""
AUTH_GOOGLE_SECRET=""

# Drizzle
DATABASE_URL="file:./db.sqlite"

# AWS Configuration
# Default AWS region
AWS_REGION="ap-south-1"
AWS_DEFAULT_REGION="ap-south-1"

# AWS Profile to use (matches profiles in aws-config/credentials)
AWS_PROFILE="staging"

# Option 1: Use AWS credentials directly (not recommended for production)
# AWS_ACCESS_KEY_ID=""
# AWS_SECRET_ACCESS_KEY=""
# AWS_SESSION_TOKEN=""

# Option 2: Use AWS credentials file (recommended)
# Point to custom credentials file location (optional)
# AWS_SHARED_CREDENTIALS_FILE="./aws-config/credentials"
# AWS_CONFIG_FILE="./aws-config/config"

# Option 3: Use role-based access (for production environments)
# AWS_ROLE_ARN="arn:aws:iam::123456789012:role/YourRoleName"
# AWS_ROLE_SESSION_NAME="aws-resource-collector"

# Collection settings
COLLECTION_TIMEOUT="300000"
COLLECTION_RETRY_ATTEMPTS="3"
COLLECTION_RETRY_DELAY="1000"
